generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id              String         @id @default(cuid())
  user            User           @relation("UserBookings", fields: [userId], references: [id])
  userId          String
  expert          ExpertProfile  @relation("ExpertBookings", fields: [expertId], references: [id])
  expertId        String
  scheduledAt     DateTime
  durationMinutes Int
  status          BookingStatus  @default(SCHEDULED)
  transcriptUrl   String?
  calls           Call[]         @relation("BookingCalls")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Call {
  id              String           @id @default(cuid())
  booking         Booking          @relation("BookingCalls", fields: [bookingId], references: [id])
  bookingId       String
  startedAt       DateTime         @default(now())
  endedAt         DateTime?
  duration        Int?             // Duration in seconds
  status          CallStatus       @default(IN_PROGRESS)
  channelName     String           // Agora channel name
  participants    CallParticipant[] 
  recording       Boolean          @default(false)
  recordingUrl    String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CallParticipant {
  id              String           @id @default(cuid())
  call            Call             @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId          String
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  role            ParticipantRole  @default(ATTENDEE)
  joinedAt        DateTime         @default(now())
  leftAt          DateTime?
  duration        Int?             // Duration in seconds
  deviceInfo      Json?            // Browser, OS, etc.
  networkQuality  Int?             // 0-5 scale
  audioEnabled    Boolean          @default(true)
  videoEnabled    Boolean          @default(true)
  screenSharing   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([callId, userId])
}



model ExpertProfile {
  id                     String         @id @default(cuid())
  user                   User           @relation(fields: [userId], references: [id])
  userId                 String         @unique
  title                  String
  bio                    String
  pricePerHour           Float
  isAvailable            Boolean        @default(true)
  categories             String[]       // e.g. ["finance", "math", "legal"]
  education              Education[]
  experience             Experience[]
  certifications         Certification[]
  totalBookings          Int            @default(0)
  totalConsultationMinutes Int          @default(0)
  rating                 Float          @default(0)
  reviews                Review[]
  availableTimeSlots     TimeSlot[]
  bookings               Booking[]      @relation("ExpertBookings")
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  firstName        String?
  lastName         String?
  image            String?
  phone            String?
  password         String
  gender           String?           // Can be "male" or "female"
  dateOfBirth      DateTime?         // User's date of birth
  isExpert         Boolean           @default(false)
  expertProfile    ExpertProfile?
  bookings         Booking[]         @relation("UserBookings")
  callParticipants CallParticipant[]
  reviews          Review[]
  accounts         Account[]
  sessions         Session[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Education {
  id          String        @id @default(cuid())
  school      String
  degree      String
  field       String
  startYear   Int
  endYear     Int
  expert      ExpertProfile @relation(fields: [expertId], references: [id], onDelete: Cascade)
  expertId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Experience {
  id          String        @id @default(cuid())
  company     String
  position    String
  description String
  startYear   Int
  endYear     Int?
  expert      ExpertProfile @relation(fields: [expertId], references: [id], onDelete: Cascade)
  expertId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Certification {
  id          String        @id @default(cuid())
  name        String
  issuer      String
  year        Int
  expert      ExpertProfile @relation(fields: [expertId], references: [id], onDelete: Cascade)
  expertId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Review {
  id          String        @id @default(cuid())
  rating      Int
  comment     String?
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  expert      ExpertProfile @relation(fields: [expertId], references: [id], onDelete: Cascade)
  expertId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TimeSlot {
  id          String        @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean       @default(false)
  expert      ExpertProfile @relation(fields: [expertId], references: [id], onDelete: Cascade)
  expertId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum BookingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum CallStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  MISSED
  FAILED
  CANCELLED
}

enum ParticipantRole {
  HOST
  EXPERT
  CLIENT
  ATTENDEE
}
